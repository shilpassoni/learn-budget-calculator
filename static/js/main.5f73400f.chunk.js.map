{"version":3,"sources":["components/ExpenseForm.js","components/ExpenseItem.js","components/ExpenseList.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseForm","charge","amount","handleCharge","handleAmount","handleSubmit","edit","onSubmit","className","htmlFor","type","id","name","placeholder","value","onChange","ExpenseItem","expense","handleEdit","handleDelete","clearItems","aria-label","onClick","ExpenseList","expenses","map","key","length","Alert","text","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","console","log","setItem","stringify","handleAlert","setTimeout","e","preventDefault","tempExpenses","item","singleExpense","uuid","target","parseInt","filter","find","reduce","acc","curr","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f73400f.chunk.js","sourcesContent":["import React from 'react'\r\nimport {MdSend} from 'react-icons/md';\r\n\r\nconst ExpenseForm = ({\r\n    charge,\r\n    amount,\r\n    handleCharge,\r\n    handleAmount, \r\n    handleSubmit,\r\n    edit\r\n  }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"form-center\">\r\n            <div className=\"form-group\">\r\n             <label htmlFor=\"expense\">charge</label>\r\n             <input \r\n               type=\"text\" \r\n               className=\"form-control\" \r\n               id=\"charge\" \r\n               name=\"charge\"\r\n               placeholder=\"e.g. rent\"\r\n               value={charge}\r\n               onChange={handleCharge}\r\n             />   \r\n            </div>  \r\n          </div>\r\n          <div className=\"form-center\">\r\n            <div className=\"form-group\">\r\n             <label htmlFor=\"amount\">amount</label>\r\n             <input \r\n               type=\"text\" \r\n               className=\"form-control\" \r\n               id=\"amount\" \r\n               name=\"amount\"\r\n               placeholder=\"e.g. 100\"\r\n               value={amount}\r\n               onChange={handleAmount}\r\n             />   \r\n            </div>  \r\n          </div>\r\n          <button type=\"submit\" className=\"btn\">\r\n             {edit ? \"edit\" : \"submit\"}\r\n             <MdSend className=\"btn-icon\"/>  \r\n          </button>   \r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React from 'react'\r\nimport {MdEdit, MdDelete} from 'react-icons/md';\r\n const ExpenseItem = ({expense, handleEdit, handleDelete, clearItems}) => {\r\n const {id, charge,amount} = expense; \r\n    return (\r\n        <li>\r\n         <div className=\"info\">\r\n          <span className=\"expense\">{charge}</span>\r\n          <span className=\"amount\">{amount}</span>   \r\n         </div>  \r\n         <div>\r\n           <button className=\"edit-btn\" aria-label=\"edit button\" onClick={()=>handleEdit(id)}>\r\n            <MdEdit/>\r\n           </button> \r\n           <button className=\"clear-btn\" aria-label=\"delete button\" onClick={()=>handleDelete(id)}>\r\n            <MdDelete/>\r\n           </button> \r\n         </div>\r\n        </li>\r\n    );\r\n};\r\nexport default ExpenseItem;","import React from 'react';\r\nimport Item from './ExpenseItem';\r\nimport {MdDelete} from 'react-icons/md';\r\nconst ExpenseList = ({expenses, handleEdit, handleDelete, clearItems }) => {\r\n    return (\r\n        <>\r\n          <ul className=\"list\">\r\n           {expenses.map((expense)=>{\r\n             return ( \r\n               <Item \r\n                 key={expense.id} \r\n                 expense={expense}\r\n                 handleDelete={handleDelete}\r\n                 handleEdit={handleEdit}\r\n                />\r\n              );\r\n             })}   \r\n          </ul>\r\n          {expenses.length > 0 && <button className=\"btn\" onClick={clearItems}>clear expenses</button>}  \r\n          <MdDelete className=\"btn-icon\"/>\r\n        </>\r\n    );\r\n};\r\nexport default ExpenseList;\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst Alert = ({type, text}) => {\r\n    return (\r\n        <div className={`alert alert-${type}`}>\r\n           {text} \r\n        </div>\r\n    )\r\n}\r\nexport default Alert;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ExpenseForm from \"./components/ExpenseForm\";\nimport ExpenseList from \"./components/ExpenseList\";\nimport Alert from \"./components/Alert\";\nimport uuid from \"uuid/v4\";\n// const initialExpenses = [\n//   { id: uuid(), charge: \"rent\", amount: 1600 },\n//   { id: uuid(), charge: \"car payment\", amount: 400 },\n//   {\n//     id: uuid(),\n//     charge: \"credit card bill \",\n//     amount: 1200\n//   }\n// ];\nconst initialExpenses = localStorage.getItem(\"expenses\")\n  ? JSON.parse(localStorage.getItem(\"expenses\"))\n  : [];\nfunction App() {\n  // all expenses, add expense\n  const [expenses, setExpenses] = useState(initialExpenses);\n  // single expense\n  const [charge, setCharge] = useState(\"\");\n  // single amount\n  const [amount, setAmount] = useState(\"\");\n  // alert\n  const [alert, setAlert] = useState({ show: false });\n  // edit\n  const [edit, setEdit] = useState(false);\n  // id\n  const [id, setId] = useState(0);\n  useEffect(() => {\n    console.log(\"called\");\n\n    localStorage.setItem(\"expenses\", JSON.stringify(expenses));\n  }, [expenses]);\n  // *********** functionality **************\n  //add charge\n  const handleCharge = e => {\n    setCharge(e.target.value);\n  };\n  // add amount\n  const handleAmount = e => {\n    let amount = e.target.value;\n    if (amount === \"\") {\n      setAmount(amount);\n    } else {\n      setAmount(parseInt(amount));\n    }\n  };\n\n  // handle alert\n  const handleAlert = ({ type, text }) => {\n    setAlert({ show: true, type, text });\n    setTimeout(() => {\n      setAlert({ show: false });\n    }, 7000);\n  };\n  // handle submit\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (charge !== \"\" && amount > 0) {\n      if (edit) {\n        let tempExpenses = expenses.map(item => {\n          return item.id === id ? { ...item, charge, amount } : item;\n        });\n        setExpenses(tempExpenses);\n        setEdit(false);\n      } else {\n        const singleExpense = { id: uuid(), charge, amount };\n        setExpenses([...expenses, singleExpense]);\n        handleAlert({ type: \"success\", text: \"item added\" });\n      }\n      // set charge back to empty string\n      setCharge(\"\");\n      // set amount back to zero\n      setAmount(\"\");\n    } else {\n      handleAlert({\n        type: \"danger\",\n        text: `charge can't be empty value and amount value has to be bigger than zero`\n      });\n    }\n  };\n  // handle delete\n  const handleDelete = id => {\n    let tempExpenses = expenses.filter(item => item.id !== id);\n    setExpenses(tempExpenses);\n    handleAlert({ type: \"danger\", text: \"item deleted\" });\n  };\n  //clear all items\n  const clearItems = () => {\n    setExpenses([]);\n  };\n  // handle edit\n  const handleEdit = id => {\n    let expense = expenses.find(item => item.id === id);\n    let { charge, amount } = expense;\n    setCharge(charge);\n    setAmount(amount);\n    setEdit(true);\n    setId(id);\n  };\n\n  return (\n    <>\n      {alert.show && <Alert type={alert.type} text={alert.text} />}\n      <h1>budget calculator</h1>\n      <main className=\"App\">\n        <ExpenseForm\n          handleSubmit={handleSubmit}\n          charge={charge}\n          handleCharge={handleCharge}\n          amount={amount}\n          handleAmount={handleAmount}\n          edit={edit}\n        />\n        <ExpenseList\n          expenses={expenses}\n          handleDelete={handleDelete}\n          handleEdit={handleEdit}\n          clearItems={clearItems}\n        />\n      </main>\n      <h1>\n        total spending :\n        <span className=\"total\">\n          $\n          {expenses.reduce((acc, curr) => {\n            return (acc += curr.amount);\n          }, 0)}\n        </span>\n      </h1>\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}